export default defineNuxtConfig({
    compatibilityDate: '2024-04-03',
    devtools: {enabled: true},
    modules: ["nuxt-oidc-auth"],
    oidc: {
        defaultProvider: 'oidc',

        // Config reference: https://github.com/itpropro/nuxt-oidc-auth/tree/main#providers
        providers: {
            oidc: {

                // Autogenerated URLs don't work for authentik. Set them manually
                authorizationUrl: 'https://auth.geber.io/application/o/authorize/',
                tokenUrl: 'https://auth.geber.io/application/o/token/',
                userinfoUrl: 'https://auth.geber.io/application/o/userinfo/',
                logoutUrl: 'https://auth.geber.io/application/o/nuxttest/end-session/',
                redirectUri: 'http://localhost:3000/auth/oidc/callback',

                // They need to be set empty for the .env variables to take effect
                // NUXT_OIDC_PROVIDERS_OIDC_CLIENT_ID
                // NUXT_OIDC_PROVIDERS_OIDC_CLIENT_SECRET
                clientId: '',
                clientSecret: '',

                // This disables the need for `openIdConfiguration`
                validateAccessToken: false,
                validateIdToken: false,

                // Set to true for the raw token to be available in the frontend
                exposeAccessToken: true,

                // Request additional user information instead of just some ID
                scope: ['openid', 'profile', 'email'],

                // Optional stuff that may come in handy

                // grantType: 'authorization_code',
                // tokenRequestType: 'form-urlencoded',
                // authenticationScheme: 'header',
            }
        },
        session: {
            // Those need to be false, otherwise the login will fail (why?)
            // Might need some of that nitro persistence (see below)
            // https://github.com/itpropro/nuxt-oidc-auth/issues/10
            expirationCheck: false,
            automaticRefresh: false,
            expirationThreshold: 3600,
        },
        middleware: {

            // Seems to allow hooking into the callback to mess around with the response.
            // Untested
            globalMiddlewareEnabled: false,

            // Enables the creaton of a custom login page via /auth/login
            // No username / password but really just another button from what I get.
            customLoginPage: true,
        },
    },

    // This is part of the oidc playground config, yet didn't do anything useful in my tests
    // I think the idea is to keep token information locally stored. Not much in terms of documentation.
    // https://github.com/itpropro/nuxt-oidc-auth/blob/main/playground/nuxt.config.ts#L96-L104

    // nitro: {
    //     preset: 'node-server',
    //     storage: { // Local file system storage for demo purposes
    //         oidc: {
    //             driver: 'fs',
    //             base: 'oidcstorage'
    //         }
    //     }
    // },
})